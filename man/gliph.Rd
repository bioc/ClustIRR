% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gliph.R
\name{gliph}
\alias{gliph}
\title{TCR clustering for specificity analysis}
\usage{
gliph(
  data_sample,
  data_ref,
  version = 2,
  ks = c(2, 3, 4),
  cores = 1,
  control = list(B = 1000, global_max_dist = 1, local_max_fdr = 0.05, local_min_ove = 2,
    local_min_o = 3, trim_flank_aa = 0, global_pairs = NULL, low_mem = FALSE)
)
}
\arguments{
\item{data_sample}{data.frame: TCR sample. Must be a data.frame that has
the following columns: CDR3b, TRBV, TRBJ, CDR3a, TRAV, TRAJ, sample_id.
Bare minimum: CDR3b, sample_id}

\item{data_ref}{data.frame: reference database}

\item{version}{integer: version = 1, 2 or 3, gliph version to use}

\item{ks}{integer vector: motif lengths to use (default ks=(2,3,4))}

\item{cores}{integer: number of CPU cores to use}

\item{control}{list: auxiliary input parameters (described below)
\itemize{
  \item B - integer: simulation depth
  \item global_max_dist - integer: maximum hamming distance for global
  clustering
  \item local_max_fdr - numeric: maximum cutoff p-value for random
generation
  \item local_min_ove - numeric: minimum fold enrichment
  \item local_min_o - numeric: minimum motif observations
  \item trim_flank_aa - integer: cut off value for trimming aa flanks
  \item low_mem - logical: low memory mode. Slower looping, lower memory
  footprint
  \item global_pairs - matrix: optional pre-computed global pairs
}}
}
\value{
gliphR returns a list of the following elements:
\itemize{
   \item clust - list: local + global clusters
   \item edges - list: local + global edges
   \item data_sample - data.frame: examined data sample
   \item version - integer: used gliph version
   \item ks - integer vector: used motif lengths
   \item cores - integer: number of used CPU cores
   \item control - list: used auxiliary input parameters
}
}
\description{
Find groups of TCRs with locally or globally similar CDR3s.
Based on Gliph and Gliph2 clustering method.
}
\examples{
## this example shows how to run gliphR with minimal input

# load package input data
data("hs_CD8_ref")
data("gliph_input_data")
data_sample <- gliph_input_data[,1:3]
data_ref <- hs_CD8_ref[,1:3]

# detect cores
cores <- parallel::detectCores()

# run gliph and save output to gliph_output
gliph_output <- gliph(
data_sample = data_sample,
data_ref = data_ref
)

}
