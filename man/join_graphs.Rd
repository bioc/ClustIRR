\name{join_graphs}
\alias{join_graphs}
\title{Joins two graphs obtained from two \code{clust_irr} objects}
\usage{join_graphs(clust_irr_1, clust_irr_2)}
\arguments{
\item{clust_irr_1}{S4 object generated by the function \code{cluster}}
\item{clust_irr_2}{S4 object generated by the function \code{cluster}}
}
\value{
The main output of this function is an \code{igraph} object.
}

\description{
As input we take two \code{clust_irr} objects generated by the function 
\code{cluster}.

Using each \code{clust_irr} object we generate a graph (with the function 
\code{get_graph}) in which the different vertices represent clones, and 
undirected edges are drawn between a pair of vertices if the corresponding 
clones are locally and/or globally similar (see definitions of local/global 
clustering in the documentation of \code{cluster}. 

The function \code{join_graphs} performs the following operation on the the 
two graphs:

First it performs an union of the vertices. Second, it performs global 
clustering between the two graphs, i.e. it compares the CDR3 sequences of 
the clones between the two graphs. If two clones have similar CDR3 sequences,
then the corresponding vertices are connected by an edge.

The results is another \code{igraph} object.
}

\examples{
# load package input data
data("CDR3ab")
s <- base::data.frame(CDR3b = CDR3ab[1:100, "CDR3b"])
r <- base::data.frame(CDR3b = CDR3ab[1:5000, "CDR3b"])

# artificially enrich motif 'RWGW' inside sample dataset
base::substr(x = s$CDR3b[1:20], start = 6, stop = 9) <- "RWGW"

# add an artificial clonal expansion of two sequences to the sample dataset
s <- rbind(s, base::data.frame(CDR3b = rep(x = c("CATSRADKPDGLDALETQYF",
                                                 "CATSRAAKPDGLAALSTQYF"),
                                           times = 5)))

# run ClustIRR analysis
out <- cluster(s = s, 
               r = r,
               version = 2,
               ks = 4,
               cores = 1,
               control = list(trim_flank_aa = 3))

# get graph
g <- join_graphs(out)

# plot graph
plot(g)
}